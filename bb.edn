{:tasks
 {:enter        (println (str (java.util.Date.)
                              " task " "'" (:name (current-task)) "'"
                              " running... "))
  :leave        (println (str (java.util.Date.)
                              " task " "'" (:name (current-task)) "'"
                              " done."))
  -project      "cljweb-pyregence"
  reload        (shell "systemctl --user daemon-reload")
  status        {:depends [-project]
                 :task    (shell (format "systemctl --user status %s" -project))}
  start         {:depends [-project]
                 :task    (shell (format "systemctl --user start %s" -project))}
  stop          {:depends [-project]
                 :task    (shell (format "systemctl --user stop %s" -project))}
  restart       (do
                  (run 'stop)
                  (run 'start))
  compile       (clojure "-M:compile-cljs")
  pull          (shell "git pull")
  migrate       (clojure "-M:build-db migrate")
  build-uberjar (clojure "-X:build-uberjar")
  build-all     (clojure "-M:build-db build-all")
  dev-data      (clojure "-M:build-db build-all --dev-data")
  functions     (clojure "-M:build-db functions")
  test          (clojure "-X:rct-test")
  prod          (do
                  (run 'install)
                  (run 'functions)
                  (run 'clean)
                  (run 'compile)
                  (run 'server-start))
  dev           (do
                  (run 'install)
                  (run 'functions)
                  (clojure "-M:default-ssl-opts:figwheel"))
  dev-norepl    (do
                  (run 'install)
                  (run 'functions)
                  (shell "clojure -M:default-ssl-opts:figwheel-lib -m figwheel.main -b \"compile-dev\""))
  install       (shell "npm install")
  deploy        (do
                  (run 'stop)
                  (run 'pull)
                  (run 'install)
                  (run 'clean)
                  (run 'compile)
                  #_(run 'migrate)
                  (run 'functions)
                  (run 'start))
  clean         (shell "rm -rf target")
  server-start  (clojure "-M:server start")}}
