* Pyregence

Pyregence is a web portal for displaying near-term fire forecast
results for the state of California. The fire spread and impact maps
are generated by running multiple state-of-the-art simulation models
on a continuously updated stream of weather data.

At this time, Pyregence displays results from these open source fire
behavior models:

1. [[https://github.com/pyregence/gridfire][GridFire]]
2. [[https://github.com/pyregence/elmfire][ELMFIRE]]
3. [[https://github.com/pyregence/quicfire][QuicFire]]

** Installation Requirements

- [[https://jdk.java.net][Java Development Kit (version 11+)]]
- [[https://clojure.org/guides/getting_started][Clojure CLI tools]]
- [[https://www.postgresql.org/download][Postgresql (version 12)]]
- [[https://postgis.net/install][PostGIS (version 3)]]

** Postgresql Database Setup

*PostgreSQL* needs to be installed on the machine that will be hosting
the Pyregence website. Once the Postgresql database server is running
on your machine, you should navigate to the toplevel directory and run
the database build command as follows:

#+begin_src sh
clojure -M:build-db build-all
#+end_src

This will begin by creating a new database and role called *pyregence*
and then add the pgcrypto and postgis extensions to it. Next, the
script will populate the database with the schemas, tables, and
functions that are necessary for storing and processing Pyregence's
data. Finally, it will load some default data into these tables that
is necessary for the website to function properly.

*** Performance Settings

If you want to improve the performance of your Postgresql server, one
way is to visit the [[https://pgtune.leopard.in.ua/][pgtune]] website
and input your system settings. This will generate a set of configuration
options that you can add to the postgresql.conf file in your system-specific
Postgresql data directory.

If you would like to keep these settings separate for your own
reference, you can add them to a file called "performance.conf" that
you should place in your Postgresql data directory. You can then
import these settings into postgresql.conf by adding this line to the
end of that file:

#+begin_example
include = 'performance.conf'
#+end_example

Note that the Postgresql server will need to be restarted for these
changes to take effect.

** Environment Variable Setup

In order for your command line shell to find the programs installed
above, you will need to update your environment variables. Under
GNU/Linux, *BSD, or MacOS X, you can set these through your shell's
.*rc or .*profile configuration files in your $HOME directory. In a
Windows environment, you will need to set either the USER (for the
current user only) or SYSTEM (for any user) environment variables
under your system settings menu.

*** Step 1: Add JAVA_HOME

On a Unix machine using bash (e.g., GNU/Linux or MacOS X):

#+begin_src sh
export JAVA_HOME=<jdk-installation-directory>
#+end_src

On a Unix machine using csh or tcsh (e.g., *BSD):

#+begin_src sh
setenv JAVA_HOME <jdk-installation-directory>
#+end_src

On a Windows machine:

#+begin_example
JAVA_HOME = C:\Program Files\Java\jdk-X.X.X
#+end_example

Replace *X.X.X* with the JDK version installed on your computer.

*** Step 2: Update PATH

On a Unix machine using bash (e.g., GNU/Linux or MacOS X):

#+begin_src sh
export PATH=$PATH:$JAVA_HOME/bin
#+end_src

On a Unix machine using csh or tcsh (e.g., *BSD):

#+begin_src sh
setenv PATH $PATH\:$JAVA_HOME/bin
#+end_src

On a Windows machine, add these entries to the PATH environment
variable:

#+begin_example
%JAVA_HOME%\bin
C:\Program Files\PostgreSQL\X\lib
C:\Program Files\PostgreSQL\X\bin
#+end_example

Replace *X* with the PostgreSQL version installed on your computer.

*** Step 3: Add Cameras Configuration

1. Copy the default camera config file in the project directory:
#+begin_src sh
cp camera-config.default.edn camera-config.edn
#+end_src

2. Ask one of the developers for the API key to
[[http://alertwildfire.org][AlertWildfire]] API.

3. Open camera-config.edn and replace "REPLACE_ME" with the API key.

** Development Web Server

*** Modifying hosts file

Add the following line to your hosts file. This local url will be
launched by Figwheel (see next section).

#+begin_example
127.0.0.1 local.pyregence.org
#+end_example

*** Launching Figwheel

To start the Figwheel server, navigate to the toplevel project
directory and run:

#+begin_src sh
clojure -M:figwheel
#+end_src

This will start a webserver on http://local.pyregence.org:8080 (also
accessible from http://localhost:8080), which serves up the website in
dev mode. Any changes to CLJS files will be automatically pushed to
the browser when the files are saved. Any changes to CLJ files will be
pushed to the running server process. A CLJS browser REPL will also be
launched at the terminal for you to interactively develop your
client-side code.

*** Checking for Reflection Warnings

From the toplevel project directory run:

#+begin_src sh
clojure -M:check-reflection
#+end_src

This will emit warnings when reflection is needed to resolve Java
method calls or field accesses. To resolve any that appear, add
[[https://clojure.org/reference/java_interop#typehints][type hints]] to your code. Resolving all reflection warnings can improve
system performance.

** Production Web Server

*** Installation Requirements

- [[https://certbot.eff.org/][certbot]]
- [[https://www.openssl.org/source/][openssl]]

*** Email Server

To set up the email server for system emails, start by creating a file
named `email-server.edn` in the root directory of the application. Add
the following EDN object containing server details to the file,
replacing the values with your own:

#+begin_src clojure
{:site-url "https://pyregence.org"
 :host     "smtp.gmail.com"
 :user     "example@gmail.com"
 :pass     "changeme"
 :ssl      true}
#+end_src

*** Enabling https

If you have not already created an SSL certificate, you must start the
server without an https port specified.

#+begin_src sh
clojure -M:run-server
#+end_src

To automatically create an SSL certificate signed by [[https://letsencrypt.org][Let's Encrypt]],
simply run the following command from your shell:

#+begin_src sh
clojure -M:https --certbot-init -d mydomain.com [-p certbot-dir]
#+end_src

Note: If your certbot installation stores its config files in a
directory other than /etc/letsencrypt, you should specify it with the
optional certbot-dir argument to certbot-init.

The certbot-init command will first create a shell script in the
directory containing this README, called certbot-deploy-hook.sh. Next,
it sends a request to the Let's Encrypt servers for a new signed SSL
certificate and sets certbot-deploy-hook.sh to run automatically when
the new certificate is received. When executed, this script will
repackage the new certificate into a format that can be understood by
our web server.

While there should be no need to do so, if you ever want to perform
this repackaging step manually, simply run this command from your
shell:

#+begin_src sh
clojure -M:https --package-cert -d mydomain.com [-p certbot-dir]
#+end_src

Certbot runs as a background task every 12 hours and will renew any
certificate that is set to expire in 30 days or less. Each time the
certificate is renewed, certbot-deploy-hook.sh will be run
automatically to repackage the updated certificate into the correct
format.

*** Compiling Clojurescript to Javascript

To compile the Clojurescript files under src/cljs to Javascript under
target/public/cljs, navigate to the toplevel project directory and
run:

#+begin_src sh
clojure -M:compile-cljs
#+end_src

The main Javascript entry point file will be written to
target/public/cljs/app.js. The Clojurescript compiler options are read
from the toplevel compile-prod.cljs.edn file.

*** Launching the Web Server

To compile and run the web application, navigate to the toplevel
project directory and run:

#+begin_src sh
clojure -M:build-db only-functions
clojure -M:run-server -m [dev|prod] [-p 8080] [-P 8443]
#+end_src

The website will then be available at http://localhost:8080 unless a
port is specified. An http port can be specified with -p and an https
port can be specified with -P. In dev mode, server-side exceptions
will be displayed in the browser and Clojure source files will be
reloaded whenever you refresh the page. These features are disabled in
prod mode. If -m is unspecified, it will default to prod mode.

If you don't already have an SSL certificate, you cannot specify an
https port.

*** Maintaining Daily Logs

By default the server will log to standard out. If you would like to
have the system log to YYYY-DD-MM.log, use the "-o path" option to
specify an output path. You can either specify a path relative to
the toplevel directory of this repository or an absolute path on
your filesystem. The logger will keep the 10 most recent logs.

** License and Distribution

Copyright Â© 2020-2021 Spatial Informatics Group, LLC.

Pyregence is distributed by Spatial Informatics Group, LLC. under the
terms of the Eclipse Public License version 2.0 (EPLv2). See
LICENSE.txt in this directory for more information.
